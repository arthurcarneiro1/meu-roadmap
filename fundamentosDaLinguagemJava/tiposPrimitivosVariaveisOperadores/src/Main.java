//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) {
//Java possui 8 tipos primitivos, que s√£o tipos de dados b√°sicos ‚Äî ou seja, n√£o s√£o objetos. Eles s√£o
        // byte: n√∫mero inteiro pequeno, de -128 a 127 (8 bits)
        byte ida  = 25;

        // short: n√∫mero inteiro maior que byte, de -32.768 a 32.767 (16 bits)
        short populacaoPequenaCidade = 15000;

        //mais usado
        // int: n√∫mero inteiro padr√£o em Java, de -2 bilh√µes a 2 bilh√µes (32 bits)
        int populacaoBrasil = 210000000;

        // long: n√∫mero inteiro muito grande, precisa do 'L' no final (64 bits)
        long distanciaEstrelas = 9876543210L;

        // float: n√∫mero decimal de precis√£o simples, precisa do 'f' no final (32 bits)
        float precoProduto = 19.99f;

        //mais usado
        // double: n√∫mero decimal de precis√£o dupla, mais usado que float (64 bits)
        double saldoBancario = 15345.67;
        //mais usado
        // char: armazena um √∫nico caractere Unicode (16 bits)
        char letraInicial = 'A';
        //mais usado
        // boolean: armazena verdadeiro (true) ou falso (false) (1 bit)
        boolean estaAtivo = true;


        //Vari√°veis em Java
        //Uma vari√°vel √© um espa√ßo reservado na mem√≥ria para armazenar um valor. Toda vari√°vel precisa ser declarada com um tipo.
        int idade = 25;
        double altura = 1.75;
        char sexo = 'M';
        boolean ativo = true;
        //üß† Regras:
        //O nome da vari√°vel n√£o pode come√ßar com n√∫mero.
        //
        //N√£o pode conter espa√ßos ou caracteres especiais (exceto _ e $).
        //
        //Evite usar palavras reservadas como class, public, int, etc.


        // ---------------------------
        // üßÆ Operadores Aritm√©ticos
        // ---------------------------
        int a = 10;
        int b = 3;

        int soma = a + b;       // Adi√ß√£o: 10 + 3 = 13
        int subtracao = a - b;  // Subtra√ß√£o: 10 - 3 = 7
        int multiplicacao = a * b; // Multiplica√ß√£o: 10 * 3 = 30
        int divisao = a / b;    // Divis√£o inteira: 10 / 3 = 3
        int resto = a % b;      // M√≥dulo (resto da divis√£o): 10 % 3 = 1

        // ---------------------------
        // üìù Operadores de Atribui√ß√£o
        // ---------------------------
        int x = 5;
        x += 3;  // Equivale a: x = x + 3 ‚Üí x = 8
        x -= 2;  // Equivale a: x = x - 2 ‚Üí x = 6
        x *= 4;  // Equivale a: x = x * 4 ‚Üí x = 24
        x /= 6;  // Equivale a: x = x / 6 ‚Üí x = 4
        x %= 3;  // Equivale a: x = x % 3 ‚Üí x = 1

        // ---------------------------
        // üîç Operadores de Compara√ß√£o
        // ---------------------------
        int n1 = 10;
        int n2 = 20;

        boolean igual = n1 == n2;     // false: 10 n√£o √© igual a 20
        boolean diferente = n1 != n2; // true: 10 √© diferente de 20
        boolean maior = n1 > n2;      // false
        boolean menor = n1 < n2;      // true
        boolean maiorOuIgual = n1 >= n2; // false
        boolean menorOuIgual = n1 <= n2; // true

        // ---------------------------
        // ‚öôÔ∏è Operadores L√≥gicos
        // ---------------------------
        boolean condicao1 = true;
        boolean condicao2 = false;

        boolean eLogico = condicao1 && condicao2; // false: true E false = false
        boolean ouLogico = condicao1 || condicao2; // true: true OU false = true
        boolean naoLogico = !condicao1;            // false: nega√ß√£o de true = false

        //operadores ternarios
        //condi√ß√£o ? valorSeVerdadeiro : valorSeFalso;
        // üìå Exemplo 1: Verificando se a pessoa √© maior de idade
        int year = 18;
        // Se idade for maior ou igual a 18, retorna "Maior de idade", sen√£o "Menor de idade"
        String status = (idade >= 18) ? "Maior de idade" : "Menor de idade";
        System.out.println("Status: " + status);

        // üìå Exemplo 2: Verificando se um n√∫mero √© par ou √≠mpar
        int numero = 7;
        // Se o n√∫mero dividido por 2 tiver resto 0, √© par; sen√£o, √≠mpar
        String parOuImpar = (numero % 2 == 0) ? "Par" : "√çmpar";
        System.out.println("O n√∫mero " + numero + " √©: " + parOuImpar);



    }
}